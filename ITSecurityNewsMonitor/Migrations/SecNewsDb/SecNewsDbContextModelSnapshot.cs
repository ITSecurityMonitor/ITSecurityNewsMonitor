// <auto-generated />
using System;
using ITSecurityNewsMonitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ITSecurityNewsMonitor.Migrations.SecNewsDb
{
    [DbContext(typeof(SecNewsDbContext))]
    partial class SecNewsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("HighLevelTagView", b =>
                {
                    b.Property<int>("HighLevelTagsID")
                        .HasColumnType("integer");

                    b.Property<int>("ViewsID")
                        .HasColumnType("integer");

                    b.HasKey("HighLevelTagsID", "ViewsID");

                    b.HasIndex("ViewsID");

                    b.ToTable("HighLevelTagView");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.HighLevelTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("HighLevelTags");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Keyword", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LowLevelTagId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("LowLevelTagId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.LowLevelTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("HighLevelTagId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("HighLevelTagId");

                    b.ToTable("LowLevelTags");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("Headline")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<bool>("ManuallyAssigned")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("integer");

                    b.Property<int?>("NewsLowLevelTagID")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NewsGroupId")
                        .IsUnique();

                    b.HasIndex("NewsLowLevelTagID");

                    b.HasIndex("SourceId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("LowLevelTagId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("LowLevelTagId");

                    b.ToTable("NewsGroup");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsLowLevelTag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.HasKey("ID");

                    b.ToTable("NewsLowLevelTags");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Source", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.View", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Vote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Criticality")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NewsGroupId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.VoteRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NewsGroupId");

                    b.ToTable("VoteRequests");
                });

            modelBuilder.Entity("HighLevelTagView", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.HighLevelTag", null)
                        .WithMany()
                        .HasForeignKey("HighLevelTagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITSecurityNewsMonitor.Models.View", null)
                        .WithMany()
                        .HasForeignKey("ViewsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Keyword", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.LowLevelTag", "LowLevelTag")
                        .WithMany("Keywords")
                        .HasForeignKey("LowLevelTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LowLevelTag");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.LowLevelTag", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.HighLevelTag", "HighLevelTag")
                        .WithMany("LowLevelTags")
                        .HasForeignKey("HighLevelTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HighLevelTag");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.News", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.NewsGroup", "NewsGroup")
                        .WithOne("News")
                        .HasForeignKey("ITSecurityNewsMonitor.Models.News", "NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITSecurityNewsMonitor.Models.NewsLowLevelTag", null)
                        .WithMany("News")
                        .HasForeignKey("NewsLowLevelTagID");

                    b.HasOne("ITSecurityNewsMonitor.Models.Source", "Source")
                        .WithMany("News")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsGroup");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsGroup", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.LowLevelTag", "LowLevelTag")
                        .WithMany()
                        .HasForeignKey("LowLevelTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LowLevelTag");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Vote", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.NewsGroup", "NewsGroup")
                        .WithMany()
                        .HasForeignKey("NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsGroup");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.VoteRequest", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.NewsGroup", "NewsGroup")
                        .WithMany()
                        .HasForeignKey("NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsGroup");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.HighLevelTag", b =>
                {
                    b.Navigation("LowLevelTags");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.LowLevelTag", b =>
                {
                    b.Navigation("Keywords");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsGroup", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsLowLevelTag", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Source", b =>
                {
                    b.Navigation("News");
                });
#pragma warning restore 612, 618
        }
    }
}
