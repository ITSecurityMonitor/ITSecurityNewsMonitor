// <auto-generated />
using System;
using ITSecurityNewsMonitor.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ITSecurityNewsMonitor.Migrations.SecNewsDb
{
    [DbContext(typeof(SecNewsDbContext))]
    [Migration("20210404143037_ChangedTags")]
    partial class ChangedTags
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Headline")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<bool>("ManuallyAssigned")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("integer");

                    b.Property<int>("SourceId")
                        .HasColumnType("integer");

                    b.Property<string>("Summary")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("NewsGroupId");

                    b.HasIndex("SourceId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Archived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.ToTable("NewsGroup");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Source", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Homepage")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int?>("NewsID")
                        .HasColumnType("integer");

                    b.Property<int?>("ViewID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("NewsID");

                    b.HasIndex("ViewID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.View", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Views");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Vote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Criticality")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NewsGroupId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.VoteRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<int>("NewsGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("NewsGroupId");

                    b.ToTable("VoteRequests");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.News", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.NewsGroup", "NewsGroup")
                        .WithMany("News")
                        .HasForeignKey("NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ITSecurityNewsMonitor.Models.Source", "Source")
                        .WithMany("News")
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsGroup");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Tag", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.News", null)
                        .WithMany("Tags")
                        .HasForeignKey("NewsID");

                    b.HasOne("ITSecurityNewsMonitor.Models.View", null)
                        .WithMany("Tags")
                        .HasForeignKey("ViewID");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Vote", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.NewsGroup", "NewsGroup")
                        .WithMany()
                        .HasForeignKey("NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsGroup");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.VoteRequest", b =>
                {
                    b.HasOne("ITSecurityNewsMonitor.Models.NewsGroup", "NewsGroup")
                        .WithMany("VoteRequests")
                        .HasForeignKey("NewsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsGroup");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.News", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.NewsGroup", b =>
                {
                    b.Navigation("News");

                    b.Navigation("VoteRequests");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.Source", b =>
                {
                    b.Navigation("News");
                });

            modelBuilder.Entity("ITSecurityNewsMonitor.Models.View", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
