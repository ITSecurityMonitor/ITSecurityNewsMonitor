  # Define settings for C# analysis
  ##################################
  #  csharp:
    # The `prepare` step exists for customization on LGTM.com only.
    # prepare:
    #   packages:
    #     - example_package
    # Add an `after-prepare` step if you need to run commands after the `prepare` step.
    # Each command should be listed on a separate line.
    #  after_prepare:
    #  - export PATH=$LGTM_WORKSPACE/tools:$PATH
    # The `index` step builds the code and extracts information during the build
    # process.
    #index:
      # Specify that all project or solution files should be used for extraction.
      # Default: false.
      #  all_solutions: true
      # Specify a list of one or more project or solution files for extraction.
      # Default: LGTM chooses the file closest to the root of the repository (this may
      # fail if there are multiple candidates).
      # solution: 
      #  - myProject.sln
      # Override the autobuild process by specifying a list of custom build commands
      # to use instead. 
      # build_command:
      #  - ./example-compile-all.sh
      # By default, LGTM analyzes the code by building it. You can override this,
      # and tell LGTM not to build the code. Beware that this can lead
      # to less accurate results.
      # buildless: true
      # Specify .NET Core settings.
      # dotnet:
        # Specify additional arguments to `dotnet build`.
        # Default: empty.
        # arguments: "example_arg"
        # Specify the version of .NET Core SDK to use.
        # Default: The version installed on the build machine.
        # version: 2.1
      # Specify MSBuild settings.
      # msbuild:
        # Specify a list of additional arguments to MSBuild. Default: empty.
        # arguments: /P:WarningLevel=2
        # Specify the MSBuild configuration to use, for example, debug or release.
        # Default: read from the solution file or files.
        # configuration: release
        # Specify the platform to target, for example: x86, x64, or Any CPU.
        # Default: read from the solution file or files.
        # platform: x86
        # Specify the MSBuild target. Default: rebuild.
        # target: notest
      # Specify whether or not to perform a NuGet restore for extraction. Default: true.
      # nuget_restore: false
      # Specify a version of Microsoft Visual Studio to use for MSBuild or any custom
      # build commands (build_command). For example:
      #    10 for Visual Studio 2010
      #    12 for Visual Studio 2012
      #    14 for Visual Studio 2015
      #    15 for Visual Studio 2017
      # Default: read from project files
      # vstools_version: 10
      # Specify additional options for the extractor,
      # for example --fast to perform a faster extraction that produces a smaller 
      # database.
      # extractor: "--fast"
      
extraction:
  csharp:
    solution: 
      - ITSecurityNewsMonitor.sln
    index:    # Customizable step used by all languages.
      build_command:
        - dotnet restore
        - dotnet build
